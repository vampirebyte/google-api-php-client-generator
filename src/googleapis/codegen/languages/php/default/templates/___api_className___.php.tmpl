<?php

{% language php %}{% copyright_block %}

namespace {{ api.ownerName }}\Service;

use Google\Client;{% for method in api.methods %}{% if method.response %}
use {{ api.ownerName }}\Service\{{api.className}}\{{ method.responseType.className }}{% if method.responseType.className|lower == resource.className|lower or method.responseType.className in api.resourceNames %}Model{% endif %};{% endif %}{% endfor %}

/**
 * Service definition for {{ api.className }} ({{ api.version }}).
 *
 *{% filter block_comment %}
 * {{ api.description }}
 *{% endfilter %}
 *
 * For more information about this service, see the API
 * <a href="{{ api.documentationLink }}" target="_blank">Documentation</a>
 *
 * NOTE: This file is auto generated by `google-apis-client-generator`, DO NOT EDIT!
 *
 * @author Google, Inc.
 */
class {{ api.className }} extends \Google\Service
{
{% if api.auth.oauth2.scopes %}{% filter noblanklines %}{% indent 2 %}
{% for authscope in api.authscopes %}
/** {{ authscope.description }}. */
public const {{ authscope.name }} =
    "{{ authscope.value }}";
{% endfor %}{% endindent %}{% endfilter %}{% endif %}

{% call_template _resource_var resource=api %}
    public $rootUrlTemplate;
{% if api.methods %}  private $base_methods;{% endif %}
    /**{% filter block_comment %}
     * Constructs the internal representation of the {{ api.className }} service.
     * {% endfilter %}
     *
     * @param Client|array $clientOrConfig The client used to deliver requests, or a
     *                                     config array to pass to a new Client instance.
     * @param string $rootUrl The root URL used for requests to the service.
     */
    public function __construct($clientOrConfig = [], $rootUrl = null)
    {
{% filter noblanklines %}
{% indent 4 %}
parent::__construct($clientOrConfig);
$this->rootUrl = $rootUrl ?: {% literal api.rootUrl %};
$this->rootUrlTemplate = $rootUrl ?: {% literal api.rootUrlTemplate %};
$this->servicePath = {% literal api.servicePath %};
{% if api.batchPath %}$this->batchPath = {% literal api.batchPath %};{% endif %}
$this->version = {% literal api.version %};
$this->serviceName = {% literal api.name %};
{% endindent %}
{% endfilter %}

{% filter noblanklines %}
{% indent 4 %}{% call_template _resource_decl resource=api %}{% endindent %}
{% indent %}
{% indent %}
{% if api.methods %}
$this->base_methods = new Resource(
    $this,
    $this->serviceName,
    '{{ resource.codeName }}',
{% indent 4 %}{% call_template _methods_decl methods=api.methods %}{% endindent %}
);
{% endif %}
{% endindent %}
{% endindent %}
    }
{% indent %}
{% for m in api.methods %}
{% call_template _method baseMethod=1 method=m %}
{% endfor %}
{% endindent %}
{% endfilter %}
}

// Adding a class alias for backwards compatibility with the previous class name.
// phpcs:disable PSR1.Files.SideEffects.FoundWithSymbols
class_alias({{ api.className }}::class, '{{ api.ownerName }}_Service_{{ api.className }}');
