<?php
{% language php %}{% copyright_block %}

namespace {{ api.ownerName }}\Service\{{ api.className }};
{% if model.superClass %}
use {{ api.ownerName }}\Service\{{ api.className }}\{{ model.superClass }};
{% endif %}
class {{ model.className }} extends {% if model.superClass %}{{ model.superClass }}{% else %}{% if model.dataType == "array" %}\Google\Collection{% else %}\Google\Model{% endif %}{% endif %}
{{% if model.properties %}
{% filter noblanklines %}
{% for property in model.properties %}
{% if property.dataType == "enum" and property.data_type.elements %}
  {% for element in property.data_type.elements %}
  {% if element.description or element.deprecated %}
  /**
  {% if element.description %}
  {% filter block_comment %}
   * {{ element.description }}
  {% endfilter %}
  {% endif %}
  {% if element.description and element.deprecated %}
   *{% endif %}
  {% if element.deprecated %}
   * @deprecated{% endif %}
   */
  {% endif %}
  public const {{ element.constantPrefix }}_{{ element.name }} = '{{ element.value }}';
  {% endfor %}
{% endif %}
{% endfor %}
{% if not model.is_variant_base and model.collectionKey %}
  protected $collection_key = '{{ model.collectionKey }}';
{% endif %}{% if model.has_gapi %}
  protected $internal_gapi_mappings = [
    {% for property in model.properties %}
      {% if not property.member_name_is_json_name %}
        "{{ property.memberName }}" => "{{ property.wireName }}",
      {% endif %}
    {% endfor %}
  ];
{% endif %}{% for property in model.properties %}
 {% if property.typeHint %}
  {% if property.memberName|add:"Type" not in model.propNames %}
  protected ${{ property.memberName }}Type = {{ property.typeHint }}::class;
  {% endif %}{% if property.memberName|add:"DataType" not in model.propNames %}
  protected ${{ property.memberName }}DataType = '{{ property.dataType }}';
  {% endif %}
 {% else %}
 {% if property.dataType == "array" or property.dataType == "map" or property.description or property.deprecated %}
  /**
  {% if property.description %}
  {% filter block_comment %}
   * {{ property.description }}
   {% endfilter %}
  {% endif %}
  {% if property.dataType == "array" or property.dataType == "map" %}
  {% if property.description or property.deprecated %}
   *{% endif %}
   * @var {{ property.annotationType }}[]{% endif %}
  {% if property.deprecated %}
   * @deprecated{% endif %}
   */
 {% endif %}
  public {% if property.annotationType %}{% if property.dataType == "array" or property.dataType == "map" %}array{% else %}{{ property.annotationType }}{% endif %} {% endif %}${{ property.memberName }};
 {% endif %}
{% endfor %}
{% endfilter %}
{% filter noblanklines %}
 {% if model.discriminantValue %}
  protected function gapiInit()
  {
    $this->type = {% literal model.discriminantValue %};
  }
 {% endif %}
{% endfilter %}{% for property in model.properties %}
{% filter noblanklines %}
{% if property.annotationType %}
  /**
   {% if property.description %}
   {% filter block_comment %}
   * {{ property.description }}
   {% endfilter %}
   *
   {% if property.possibleValues %}
   {% filter block_comment %}
   * Accepted values: {{ property.possibleValues }}
   {% endfilter %}
   *
   {% endif %}
   {% endif %}
   {% if property.dataType == "enum" %}
   * @param self::{{ property.data_type.constant_name }}_* ${{ property.memberName }}
   {% else %}
   * @param {{ property.annotationType }}{% if property.type == "array" or property.dataType == "map" %}[]{% endif %} ${{ property.memberName }}
   {% endif %}
   {% if property.deprecated %}
   * @deprecated{% endif %}
   */
{% endif %}
  {% if property.type == "array" or property.dataType == "map" or not property.typeHint %}
  public function {{ property.setterName }}(${{ property.memberName }})
  {% else %}
  public function {{ property.setterName }}({{ property.typeHint }} ${{ property.memberName }})
  {% endif %}
  {
    $this->{{ property.memberName }} = ${{ property.memberName }};
  }

{% if property.annotationType %}
  /**
   {% if property.dataType == "enum" %}
   * @return self::{{ property.data_type.constant_name }}_*
   {% else %}
   * @return {{ property.annotationType }}{% if property.type == "array" or property.dataType == "map" %}[]{% endif %}
   {% endif %}
   {% if property.deprecated %}
   * @deprecated{% endif %}
   */
{% endif %}
  public function {{ property.getterName }}()
  {
    return $this->{{ property.memberName }};
  }
{% endfilter %}{% endfor %}{% endif %}
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias({{ model.className }}::class, '{{ api.ownerName }}_Service_{{ api.className }}_{{ model.className }}');
